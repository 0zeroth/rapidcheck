* Maybe shrink reals to smaller values as well?
* Non-determinisim in generation might cause bad casts, report this
* Exception handling
* Better strategy for when to give up generating
* Use different seeds when generating
* Generate element from a collection
* Shrink nonZero, negative, positive and nonNegative
* Assertion macros have an extra '!'
* Adjustable test parameters... flags?
* Better size calculation
* suchThat, map, and other generators should have shrink()
* Static tests for traits
* Implement std::array
* Shrinker implementation classes to detail namespace
* Move test utils implementations to source file
* All generation params into single struct?
* noShrink, resize et al. are a bit cumbersome sometimes
* Create showType function which can be specialized to show human friendly type names
* Default RandomEngine
* Better syntax for generation of commands
* Generator for unique values
* Tests for arbitrary collections
* Should noShrink for collections be the default?
